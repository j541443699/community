# ServerProperties
server.port=8080
server.servlet.context-path=/community

# ThymeleafProperties
## 设置禁用缓存，防止更改页面后，浏览器的页面仍用到缓存中的旧页面，无法刷新
spring.thymeleaf.cache=false

# DataSourceProperties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&serverTimezone=Hongkong
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000

# MybatisProperties
## 编译后会新生成文件夹target，'targer/classes'指的就是classpath
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.nowcoder.community.entity
mybatis.configuration.useGeneratedKeys=true
mybatis.configuration.mapUnderscoreToCamelCase=true

# logger
# logback的简单配置，复杂配置见logback-spring.xml
#logging.level.com.nowcoder.community=debug
#logging.file.name=d:/data/javaProjects/nowcoderCommunity/community/data/community.log

# MailProperties
spring.mail.host=smtp.sina.com
spring.mail.post=465
spring.mail.username=j54144@sina.com
spring.mail.password=25afe16ef704b87d
spring.mail.protocol=smtps
spring.mail.properties.mail.stmp.ssl.enable=true

# community
## 作为常量供其他类使用，@Value
community.path.domain=http://localhost:8080
community.path.upload=d:/data/javaProjects/nowcoderCommunity/community/data/upload

# RedisProperties
## 指定使用redis的下标为11的库
spring.redis.database=11
spring.redis.host=localhost
spring.redis.port=6379

# KafkaProperties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=community-consumer-group
spring.kafka.consumer.enable-auto-commit=true
## 毫秒
spring.kafka.consumer.auto-commit-interval=3000

# ElasticsearchProperties
spring.data.elasticsearch.cluster-name=nowcoder
## 9300：tcp端口 9200：http访问端口
spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300

# TaskExecutionProperties
spring.task.execution.pool.core-size=5
## 扩容的最大大小
spring.task.execution.pool.max-size=15
spring.task.execution.pool.queue-capacity=100

# TaskSchedulingProperties
spring.task.scheduling.pool.size=5

# QuartzProperties（若不配置下面这些设置，那么启动quartz服务后，quartz是读取内存中的配置来执行任务；
# 若设置了这些设置，则启动启动quartz服务后，会将配置文件的信息存入数据库，quartz从数据库中读取信息再执行任务）
## 任务存储到数据库的方式
spring.quartz.job-store-type=jdbc
spring.quartz.scheduler-name=communityScheduler
## 调度器ID生成方式 自动
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
## 任务存储到数据库用到的类
#spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX （SpringBoot 2.5.6版本之后被删除）
org.quartz.jobStore.class=org.springframework.scheduling.quartz.LocalDataSourceJobStore
## 任务存储到数据库需要的驱动
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
## 是否采用集群方式 是
spring.quartz.properties.org.quartz.jobStore.isClustered=true
## 使用的线程池
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
## 线程池包含的线程数
spring.quartz.properties.org.quartz.threadPool.threadCount=5

# wk
wk.image.command=d:/data/javaProjects/nowcoderCommunity/wkhtmltopdf/bin/wkhtmltoimage
wk.image.storage=d:/data/javaProjects/nowcoderCommunity/community/data/wk-images

# qiniu
qiniu.key.access=03eaOYr51r6JcLMvIxvJLcoGAExPJVdLWzPYB3ho
qiniu.key.secret=rN3aOAZbnfnhWHzZHRu3HN0fl2okCOMbin3y2hLt
qiniu.bucket.header.name=community-header-j
quniu.bucket.header.url=http://rhxq4u5i1.hb-bkt.clouddn.com
qiniu.bucket.share.name=community-share-j
qiniu.bucket.share.url=http://rhxq5iffd.hb-bkt.clouddn.com